var js = (function() {
    "use strict";

    if ('classList' in document.documentElement) {
        var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };
        var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };
        var addClass = function(el, cssClass) { el.classList.add(cssClass); };
        var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };
    } else {
        var hasClass = function (el, cssClass) { return el.className.match(new RegExp('\\b' + cssClass + '\\b')); };
        var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp('\\b' + cssClass + '\\b'), ' '); };
        var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += " " + cssClass; } };
        var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };
    }

    var addEventListener;

    var el = document.createElement('div');
    if (!('addEventListener' in el)) {
        addEventListener = function (element, eventName, callback) {
            element.attachEvent('on' + eventName, callback);
        };
    } else {
        addEventListener = function (element, eventName, callback) {
            element.addEventListener(eventName, callback, false);
        };
    }

    return {
        addEventListener: addEventListener,
        getClientRect: function (el) {
            if (el.nodeType === 3) {
                var target = document.createRange();
                target.selectNodeContents(el);

                return target.getBoundingClientRect();
            }

            return el.getBoundingClientRect();
        }
    };
})();

js.addEventListener(document, 'DOMContentLoaded', function() {
    var nodeIterator = document.createNodeIterator(
        document.body,
        NodeFilter.SHOW_COMMENT,
        { acceptNode: function (node) { return NodeFilter.FILTER_ACCEPT; } }
    );
    while (nodeIterator.nextNode()) {
        var comment = nodeIterator.referenceNode, match = comment.data.match(/^XRAY START (.+)$/);
        if (!match) {
            continue;
        }

        var parts = match[1].split(' '), el = comment.nextSibling, stack = [];
        while (!(!el || (el.nodeType === 8 && el.data === ('XRAY END ' + parts[0] + ' ' + parts[1])))) {
            if (el.nodeType === 3 || (el.nodeType === 1 && el.tagName !== 'SCRIPT')) {
                stack.push(el);
            }
            el = el.nextSibling;
        }

        var bbox = {top: 999999, left: 999999, width: 0, height: 0}, i, c;
        for (i = 0, c = stack.length; i < c; ++i) {
            var rect = js.getClientRect(stack[i]);
            if (rect.width === 0 || rect.height === 0) {
                continue;
            }
            bbox.top = Math.min(bbox.top, rect.top);
            bbox.left = Math.min(bbox.left, rect.left);
            bbox.width = Math.max(bbox.width, rect.width);
            bbox.height += rect.height;
        }

        var visual = document.createElement('DIV');
        visual.style.outline = 'red dotted thin';
        visual.style.position = 'absolute';
        visual.style.top = parseInt(bbox.top) + 'px';
        visual.style.left = parseInt(bbox.left) + 'px';
        visual.style.width = parseInt(bbox.width) + 'px';
        visual.style.height = parseInt(bbox.height) + 'px';
        visual.style.zIndex = 999999;
        document.body.appendChild(visual);
    }
});
