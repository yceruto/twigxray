var js = (function() {
    "use strict";

    if ('classList' in document.documentElement) {
        var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };
        var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };
        var addClass = function(el, cssClass) { el.classList.add(cssClass); };
        var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };
    } else {
        var hasClass = function (el, cssClass) { return el.className.match(new RegExp('\\b' + cssClass + '\\b')); };
        var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp('\\b' + cssClass + '\\b'), ' '); };
        var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += " " + cssClass; } };
        var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };
    }

    var addEventListener;

    var el = document.createElement('div');
    if (!('addEventListener' in el)) {
        addEventListener = function (element, eventName, callback) {
            element.attachEvent('on' + eventName, callback);
        };
    } else {
        addEventListener = function (element, eventName, callback) {
            element.addEventListener(eventName, callback, false);
        };
    }

    return {
        addEventListener: addEventListener
    };
})();

js.addEventListener(document.body, 'mouseover', function (e) {
    var nodeIterator = document.createNodeIterator(
        document.body,
        NodeFilter.SHOW_COMMENT,
        { acceptNode: function (node) { return NodeFilter.FILTER_ACCEPT; } }
    );
    while (nodeIterator.nextNode()) {
        var comment = nodeIterator.referenceNode, match = comment.data.match(/^XRAY START (.+)$/);
        if (!match) {
            continue;
        }
        var parts = match[1].split(' '), el = comment.nextSibling, stack = [];
        while (!(!el || (el.nodeType === 8 && el.data === ('XRAY END ' + parts[0] + ' ' + parts[1])))) {
            if (el.nodeType === 3 || (el.nodeType === 1 && el.tagName !== 'SCRIPT')) {
                stack.push(el);
            }
            el = el.nextSibling;
        }
        var bbox = {top: 0, left: 0, width: 0, height: 0}, i, c;
        for (i = 0, c = stack.length; i < c; ++i) {
            var target = stack[i], rect;
            if (target.nodeType === 3) {
                target = document.createRange();
                target.selectNodeContents(stack[i]);
            }
            rect = target.getBoundingClientRect();
            bbox.top = Math.max(bbox.top, rect.top);
            bbox.left = Math.max(bbox.left, rect.left);
            bbox.width = Math.max(bbox.width, rect.width);
            bbox.height = Math.max(bbox.height, rect.height);
        }
        console.log(bbox);
    }
});
